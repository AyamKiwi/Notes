salah satu aplikasi dari interpolasi lagrang ialah pembesaran gambar. misalkan seorang desainer grafis ingin memperbesar gambar 1 x 4 pixel menjadi 1 x 7 pixel. proses pembesaran ini akan menghasilkan pixel-pixel baru yang tidak diketahui warnanya. penentuan warna pixel-pixel baru inilah yang dapat menggunakan metode interpolasi lagrang. untuk itu desainer grafis tersebut mengubah gambar tersebut menjadi tabel data numerik xi dan f(xi) dimana xi adalah posisi suatu pixel dan f(xi) adalah nilai warna pixel tersebut. dengan begitu ia dapat menghitung interpolasi lagrang dan menentukan nilai f(xi) untuk xi-xi baru tersebut.


cara lain untuk menghitung interpolasi lagrang adalah menggunakan algoritma yaitu sebaagi berikut. pada baris pertama, kita mendeklarasikan suatu fungsi bernama lagrang yang menerima 2 parameter. parameter pertama adalah x bertipe real yaitu titik x yang nilai polinom lagrangnya kita akan cari. lalu parameter kedua bernama n bertipe integer yaitu derajat polinom lagrang yang kita inginkan. dalam hal ini n adalah jumlah data dikurangi 1. lalu kita akan mendeklarasikan variabel-variabel yang akan digunakan pada fungsi. perhatikan bahwa dari rumus interpolasi lagrang, terdapat 2 komponen yaitu komponen sigma atau jumlah dan komponen pi atau produk. maka kita akan mendeklarasikan 2 variabel real yaitu sum untuk sigma dan prod untuk pi. selanjutnya pada rumus yang sama, terdapat 2 indeks yang digunakan yaitu i dan j sehingga kita juga akan mendeklarasikan variabel i dan j bertipe integer. selanjutnya kita akan menjalankan algorimanya. 

sebelum perhitungan dimulai, jelas bahwa nilai sigma = 0 sehingga kita assign 0 pada sum. kemudian pada sigma, indeks i bergerak dari 0 sampai n sehingga kita dapat menggunakan looping for dengan i = 0 sampai n. sebelum kita menghitung hasil dari pi, nilai pi adalah 1. sehingga pertama kita harus assign 1 pada prod. lalu pi menggerakan indeks j dari 0 sampai n dengan j tidak sama dengan i. maka dari itu kita dapat menggunakan looping for dengan j = 0 sampai n lalu menggunakan kondisi if yaitu if not j = i. 

untuk menghitung hasil perkalian dari (x - xj)/(xi - xj), kita akan mengubah nilai prod dengan cara assign prod menjadi nilai prod sebelumnya dikali (x - xj)/(xi - xj). hal yang sama dapat dilakukan terhadap komponen sigmanya, yaitu kita assign nilai sum menjadi nilai sum sebelumnya ditambah sesuatu yang akan dijumlahkan, yaitu yi dikali pi atau yi * prod. terakhir kita akan return nilai sum setelah semua looping selesai

setelah kita memiliki algorimanya, kita dapat mensimulasikan-nya dengan suatu bahasa pemograman, yaitu bahasa pemograman "Rust". Pertama kita akan mendeklarasikan library yang akan digunakan. dalam hal ini kita hanya menggunakan 1 library yaitu std::fs yang berfungsi untuk membaca file. 

untuk memudahkan perhitungan interpolasi lagrang bedasarkan data, kita akan Mendeklarasikan tipe data baru degan nama "Data". tipe data ini memiliki 3 komponen yaitu komponen x dan y berupa array of real dan komponen jumlah_data bertipe integer. kemudian kita Akan mendeklarasikan fungsi-fungsi yang bekerja pada tipe data tersebut. sebelum kita mengimplementasikan fungsi lagrang, kita akan Mendeklarasikan fungsi bernama read yang membaca data dari suatu file, dalam hal ini "data.txt" dan mengubahnya menjadi variabel bertipe "Data" Yang sudah kita deklarasikan sebelumnya. karena kita sudah memiliki datanya, maka kita dapat mengimplementasikan fungsi lagrang Dari algoritma yang sudah kita miliki. karena tipe "Data" sudah Memuat jumlah data, maka kita mengubah parameter n menjadi data itu sendiri. lalu bedasarkan algoritma, kita Deklarasikan variabel sum dan prod sedangkan variabel i dan j akan dideklarasikan pada saat looping.  setelah kita assign 0 pada sum, kita akan memulai looping pertama. pada bahasa rust, looping for akan bergerak Dari Batas bawah sampai Batas Atas Dikurangi 1 sehingga kita hanya perlu menulis for i in 0..data.jumlah_data. lalu setelah kita assign 1 pada prod dan membuat looping kedua beserta kondisinya, kita dapat assign nilai sum dan prod  bedasarkan algorima. terakhir kita return nilai sum.

sekarang kita dapat Memanggil fungsi-fungsi tersebut untuk menghitung interpolasi. pertama kita akan memanggil fungsi read untuk mendeklarasi variabel bernama "data" bertipe "Data" sekaligus membaca data dari data.txt. lalu kita akan membuat varibel bernama "list" yaitu list nilai-nilai x yang akan Dicari Hasil interpolasi-Nya Dari suatu file bernama list.txt. terakhir kita akan mendeklarasi variabel "hasil" yaitu array of real untuk menampung hasil interpolasi untuk setiap x pada list. 

karena kita Sudah memiliki 3 variabel tersebut, kita dapat menghitung hasil interpolasi Setiap x pada list menggunakan looping for, dengan for x pada list, kita akan memasukan ke dalam variabel "hasil", nilai interpolasi lagrang terhadap data, dengan input x. terakhir kita dapat menampilkan hasil tersebut, dan jika kita jalankan programnya diperoleh hasil sebagai berikut. jika kita ubah kembali data interpolasi ke bentuk gambar kita akan memperoleh hasil pembesaran gambar sebagai berikut. 

dengan begitu sang desainer grafis tidak hanya Dapat memperbesar gambar tersebut, Ia juga Mendapatkan ilmu baru mengenai interpolasi lagrang.